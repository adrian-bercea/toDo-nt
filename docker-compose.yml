version: '3'
services:
  # Keep the db service since you're still using PostgreSQL
  db:
    container_name: postgres
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: todo_nt_production
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"

  redis:
    container_name: redis
    image: redis:7
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"

  web:
    container_name: web
    build: .
    ports:
      - "3000:3000"
    environment:
      # HOST: todont.eu.org
      RAILS_MASTER_KEY: ${PRODUCTION_KEY}
      RAILS_ENV: production
      DATABASE_URL: postgresql://postgres:postgres@db:5432/todo_nt_production
      REDIS_URL: redis://redis:6379/1
      DISABLE_DATABASE_ENVIRONMENT_CHECK: 1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    # Modified command to force drop and recreate
    command: >
      bash -c "
        bin/rails db:migrate &&
        bin/rails server -b 0.0.0.0
      "

  sidekiq:
    container_name: sidekiq
    build: .
    environment:
      RAILS_MASTER_KEY: ${PRODUCTION_KEY}
      RAILS_ENV: production
      DATABASE_URL: postgresql://postgres:postgres@db:5432/todo_nt_production
      REDIS_URL: redis://redis:6379/1
      # HOST: todont.eu.org
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    command: bundle exec sidekiq

volumes:
  postgres_data:
  redis_data: